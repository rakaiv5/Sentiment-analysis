import tensorflow as tf

## Hyperparameter for CNN
# tf.app.flags.DEFINE_string('f', '', 'kernel')
# tf.app.flags.DEFINE_integer('batch_size', 32, 'batch size')
# tf.app.flags.DEFINE_integer('epoch', 100, 'epoch')
# tf.app.flags.DEFINE_integer('train_step', 2000, 'train_step')
# tf.app.flags.DEFINE_integer('hidden_dim', 100, 'model dim')
# tf.app.flags.DEFINE_integer('vocab_size', 16581, 'model dim')
# tf.app.flags.DEFINE_integer('emb_dim', 300, 'embedding dim')
# tf.app.flags.DEFINE_integer('n_label', 5, 'embedding dim')
# tf.app.flags.DEFINE_list('filter_size', [3,4,5], 'filter size')
# tf.app.flags.DEFINE_integer('num_filters', 100, 'number of filters')
# tf.app.flags.DEFINE_float('learning_rate', 0.0001, 'learning rate')
# tf.app.flags.DEFINE_float('dropout_rate', 0.5, 'dropout rate')
# tf.app.flags.DEFINE_string('data_path', './data/', 'data path')
# tf.app.flags.DEFINE_string('output_path', './output/', 'output path')
# tf.app.flags.DEFINE_string('ckpt_path', './output/ckpt/', 'checkpoint path')
# tf.app.flags.DEFINE_string('best_ckpt_path', './output/best_ckpt/', 'best_checkpoint path')
# tf.app.flags.DEFINE_string('train_data', 'stsa_fine_train.txt', 'training data file name')
# tf.app.flags.DEFINE_string('dev_data', 'stsa_fine_dev.txt', 'dev data file name')
# tf.app.flags.DEFINE_string('test_data', 'stsa_fine_test.txt', 'test data file name')
# tf.app.flags.DEFINE_integer('max_seq_length', 52, 'max_seq_length')
# tf.app.flags.DEFINE_bool('train', True, 'run trainig')
# tf.app.flags.DEFINE_string('model', 'CNN', 'select a training model')

## Hyperparameter for LSTM
tf.app.flags.DEFINE_string('f', '', 'kernel')
tf.app.flags.DEFINE_integer('batch_size', 32, 'batch size')
tf.app.flags.DEFINE_integer('epoch', 100, 'epoch')
tf.app.flags.DEFINE_integer('train_step', 600, 'train_step')
tf.app.flags.DEFINE_integer('hidden_dim', 128, 'model dim')
tf.app.flags.DEFINE_integer('vocab_size', 16581, 'model dim')
tf.app.flags.DEFINE_integer('emb_dim', 256, 'embedding dim')
tf.app.flags.DEFINE_integer('n_label', 5, 'embedding dim')
tf.app.flags.DEFINE_list('filter_size', [3,4,5], 'filter size')
tf.app.flags.DEFINE_integer('num_filters', 100, 'number of filters')
tf.app.flags.DEFINE_float('learning_rate', 0.0005, 'learning rate')
tf.app.flags.DEFINE_float('dropout_rate', 0.3, 'dropout rate')
tf.app.flags.DEFINE_string('data_path', './data/', 'data path')
tf.app.flags.DEFINE_string('output_path', './output/', 'output path')
tf.app.flags.DEFINE_string('ckpt_path', './output/ckpt/', 'checkpoint path')
tf.app.flags.DEFINE_string('best_ckpt_path', './output/best_ckpt/', 'best_checkpoint path')
tf.app.flags.DEFINE_string('train_data', 'stsa_fine_train.txt', 'training data file name')
tf.app.flags.DEFINE_string('dev_data', 'stsa_fine_dev.txt', 'dev data file name')
tf.app.flags.DEFINE_string('test_data', 'stsa_fine_test.txt', 'test data file name')
tf.app.flags.DEFINE_integer('max_seq_length', 20, 'max_seq_length')
tf.app.flags.DEFINE_bool('train', False, 'run trainig')
tf.app.flags.DEFINE_string('model', 'LSTM', 'select a training model')

## for binary 
# tf.app.flags.DEFINE_string('f', '', 'kernel')
# tf.app.flags.DEFINE_integer('batch_size', 32, 'batch size')
# tf.app.flags.DEFINE_integer('epoch', 100, 'epoch')
# tf.app.flags.DEFINE_integer('train_step', 2000, 'train_step')
# tf.app.flags.DEFINE_integer('hidden_dim', 128, 'model dim')
# tf.app.flags.DEFINE_integer('vocab_size', 14830, 'model dim')
# tf.app.flags.DEFINE_integer('emb_dim', 256, 'embedding dim')
# tf.app.flags.DEFINE_integer('n_label', 5, 'embedding dim')
# tf.app.flags.DEFINE_list('filter_size', [3,4,5], 'filter size')
# tf.app.flags.DEFINE_integer('num_filters', 100, 'number of filters')
# tf.app.flags.DEFINE_float('learning_rate', 0.0001, 'learning rate')
# tf.app.flags.DEFINE_float('dropout_rate', 0.3, 'dropout rate')
# tf.app.flags.DEFINE_string('data_path', './data/', 'data path')
# tf.app.flags.DEFINE_string('output_path', './output/', 'output path')
# tf.app.flags.DEFINE_string('ckpt_path', './output/ckpt/', 'checkpoint path')
# tf.app.flags.DEFINE_string('best_ckpt_path', './output/best_ckpt/', 'best_checkpoint path')
# tf.app.flags.DEFINE_string('train_data', 'stsa_binary_train.txt', 'training data file name')
# tf.app.flags.DEFINE_string('dev_data', 'stsa_binary_dev.txt', 'dev data file name')
# tf.app.flags.DEFINE_string('test_data', 'stsa_binary_test.txt', 'test data file name')
# tf.app.flags.DEFINE_integer('max_seq_length', 25, 'max_seq_length')
# tf.app.flags.DEFINE_bool('train', True, 'run trainig')
# tf.app.flags.DEFINE_string('model', 'LSTM', 'select a training model')

DEFINES = tf.app.flags.FLAGS


